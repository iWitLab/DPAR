import numpy as np
import logging
import random
from random import randrange
import Levenshtein
import itertools
import string
from ..model import ESrank, BS


log = logging.getLogger(__name__)

'''
Variables dictionary:
m = the number of results printed to screen or returned by function
flag = load from file or from serialization
method = how to sample the potential suggestions:
    sample_large_k: extract k random results from tuples list
    sample_neighborhood: find the password part in tuples list and return its neighbors (extraction is based on k before and k after)
    sample_reverse_neighborhood: find the password part in REVERSED tuples list and return its neighbors (extraction is based on k before and k after)
k = Determines the number of samples (k) random results or k neighbors
dim = the dimention that we are running 
    Dim 1 = Prefix
    Dim 2 = Base word
    Dim 3 = Suffix
    Dim 4 = Upper/Lower
    Dim 5 = L33t transformation
'''


class Recommendor():
    def __init__(self, results_struct, path):
        print(path)
        self.name = "Recommendor_module"
        self.authors = ["anonymized"]
        self.path = path
        self.data_path_augment = '/PESrank/model/data/'
        self.results_struct = results_struct
        self.empty_prefix = 0.9104925769616705
        self.empty_suffix = 0.4973588376797103
        self.empty_capital = 0.9233209177673379
        self.empty_l33t = 0.9013789702333921
        self.const = 10 ** (-3)
        self.min_prefix = 1.1048918980506789e-09 * self.const
        self.min_base_word = 5.521443080211319e-10 * self.const
        self.min_suffix = 1.1048918980506789e-09 * self.const
        self.min_l33t = 1.1048986795591223e-09 * self.const
        self.min_upper = 1.1048986795591223e-09 * self.const
        self.empty_prefix_tuple = (self.empty_prefix, '')
        self.empty_suffix_tuple = (self.empty_suffix, '')
        self.empty_capital_tuple = (self.empty_capital, '()')
        self.empty_l33t_tuple = (self.empty_l33t, '()')
        self.L1 = [(0.9240831411638062, 1), (0.00645748251164313, 2), (0.0062201486461510545, 3), (0.00513806017743442, 4), (0.004511348126421548, 5), (0.004342342146878218, 6), (0.0028195827470673214, 7), (0.002656298960181034, 8), (0.0025255040631283307, 9), (0.002387801965172552, 10), (0.0016194115701940691, 11), (0.0012703050360877858, 12), (0.0011411463818621367, 13), (0.0011153918576677965, 14), (0.0010923933832194688, 15), (0.0009099973279668212, 16), (0.0008158755900391507, 17), (0.0007076227581452546, 18), (0.000681830976049729, 19), (0.0006350485064030839, 20), (0.0006054657328619539, 21), (0.0005939126786694113, 22), (0.0005657001679385407, 23), (0.0005189280477088915, 25), (0.0005063949037268356, 27), (0.0004913654803653645, 29), (0.00047767009685466705, 31), (0.00046256305286572654, 33), (0.00045645482695473615, 35), (0.00044877762942716466, 38), (0.0004385006583502188, 41), (0.00042859212651832754, 44), (0.00040954919924583965, 47), (0.00033628671127344047, 51), (0.000262637155105394, 55), (0.0001935972292673291, 59), (0.0001433725435278419, 64), (0.00011858568982261991, 69), (0.00011260062197388093, 75), (9.980770762522751e-05, 81), (9.192766152453607e-05, 88), (8.620857369259216e-05, 95), (8.09686638675592e-05, 103), (7.545863425893282e-05, 112), (6.988029849813338e-05, 122), (5.927111113561853e-05, 132), (4.954679892625461e-05, 143), (3.6598643322662446e-05, 155), (3.024617117056839e-05, 168), (2.626475045223899e-05, 183), (2.333690038409398e-05, 199), (2.143053777344601e-05, 216), (2.0005423053108193e-05, 235), (1.818703048692552e-05, 256), (1.585841166284412e-05, 279), (1.3120990867423988e-05, 304), (1.1065596652034806e-05, 331), (8.592085990010565e-06, 360), (6.89271171928094e-06, 392), (4.90976342286318e-06, 427), (3.097580506878056e-06, 465), (1.309201249983542e-06, 506), (9.573210721223528e-07, 551), (7.513676739035979e-07, 600), (4.6986353161464665e-07, 654), (2.721896669926257e-07, 712), (1.4799666304161777e-07, 776), (8.176039426774688e-08, 845), (5.07121432799949e-08, 921), (3.415307608652718e-08, 1003), (2.4838600790201586e-08, 1093), (1.7594008893059455e-08, 1191), (1.2419300395100793e-08, 1298), (9.314475296325593e-09, 1414), (6.2096501975503965e-09, 1541), (5.1747084979586636e-09, 1679), (3.1048250987751982e-09, 1830), (2.0698833991834653e-09, 1994), (1.0349416995917327e-09, 2173), (1.0349416995917327e-09, 2368), (1.0349416995917327e-09, 2490)]
        self.L2 = [(0.0031407801667154007, 1, 1), (0.0029387922247227, 2, 2), (0.0013119736304629994, 3, 3), (0.0011232391686456977, 4, 4), (0.001056903197321533, 5, 5), (0.0008175593841231088, 6, 6), (0.0007386578177808224, 7, 7), (0.0007058898667769527, 8, 8), (0.0006641723820748701, 9, 9), (0.0006078021439380428, 10, 10), (0.0005730080937143209, 11, 11), (0.0005526269215094562, 12, 12), (0.0005450899874825824, 13, 13), (0.000527112415404593, 14, 14), (0.0005245755511577798, 15, 15), (0.0004828600048428963, 16, 16), (0.0004710983559155989, 17, 17), (0.00046903203516136555, 18, 18), (0.0004608045506948148, 19, 19), (0.0004606615946388817, 20, 20), (0.0004604808400325662, 21, 21), (0.00045908132447482105, 22, 22), (0.0004575233457635498, 23, 23), (0.00044687772326613035, 25, 25), (0.0004338738104426142, 27, 27), (0.00040661063678576915, 29, 29), (0.00039228508600836897, 31, 30), (0.0003836044037165325, 32, 32), (0.00036705668637792763, 34, 33), (0.0003350899643008298, 37, 37), (0.00029982973195572606, 40, 40), (0.0002951041862627369, 43, 43), (0.00028597171727260946, 46, 46), (0.0002833151576162524, 49, 49), (0.00026577420725485887, 53, 53), (0.0002421360599587178, 57, 57), (0.00020950573444598376, 61, 61), (0.00019903747437728127, 66, 66), (0.0001813448452175587, 71, 71), (0.0001693704582951608, 77, 77), (0.00016386619283995432, 83, 78), (0.00016235155824724458, 84, 84), (0.00015386675288001417, 91, 91), (0.00014410067357418317, 98, 98), (0.00014029315981734346, 106, 99), (0.0001378227220331203, 107, 107), (0.00013200776229346553, 116, 108), (0.00012743199745238158, 117, 117), (0.00011895979160194523, 127, 127), (0.00011445401055765325, 137, 137), (0.00010718408936745443, 148, 148), (0.00010211359480567692, 161, 150), (9.88375353084991e-05, 175, 163), (9.557411923848611e-05, 176, 176), (9.530702078081175e-05, 191, 177), (9.225874788999864e-05, 192, 178), (8.91776936827283e-05, 209, 179), (8.816601366615959e-05, 210, 195), (8.295547800121877e-05, 228, 212), (7.985331445704101e-05, 248, 248), (7.365289840394184e-05, 270, 270), (7.023802215554865e-05, 294, 272), (6.902339161851983e-05, 320, 296), (6.455750106899707e-05, 325, 325), (6.151326397282131e-05, 352, 352), (5.8840431121933366e-05, 383, 355), (5.755472946436983e-05, 417, 386), (5.4638773771237514e-05, 426, 425), (5.17549382157867e-05, 463, 462), (4.960235923119377e-05, 503, 502), (4.684694182768288e-05, 546, 545), (4.455867573915344e-05, 591, 590), (4.258435635479187e-05, 644, 591), (4.1852911852714076e-05, 645, 597), (3.9922362225551754e-05, 702, 647), (3.7448890385449294e-05, 764, 707), (3.649522728932588e-05, 771, 769), (3.538621141039479e-05, 839, 776), (3.408470924594886e-05, 914, 777), (3.207174321142398e-05, 996, 848), (3.120327559833423e-05, 997, 919), (2.9339981798320457e-05, 1086, 1002), (2.7245970470453105e-05, 1182, 1179), (2.5262515768981052e-05, 1286, 1282), (2.480885164709121e-05, 1401, 1283), (2.2650066043221596e-05, 1526, 1411), (2.2114495547882855e-05, 1663, 1532), (2.0654969396736673e-05, 1677, 1672), (1.939259473332727e-05, 1826, 1820), (1.833248040841086e-05, 1990, 1834), (1.764253836095021e-05, 2169, 1999), (1.6769472136414676e-05, 2364, 2001), (1.6335464895645653e-05, 2366, 2179), (1.5918252886697696e-05, 2578, 2181), (1.4452614956438412e-05, 2607, 2595), (1.4232784069296924e-05, 2841, 2598), (1.35006048189164e-05, 2850, 2625), (1.274334332764269e-05, 3104, 2859), (1.2293770464375509e-05, 3381, 3113), (1.1535989955728372e-05, 3685, 3140), (1.061363910863446e-05, 3741, 3717), (1.0250992163242233e-05, 4057, 3748), (9.751056805038016e-06, 4120, 4091), (9.19928554419393e-06, 4467, 4131), (8.954940912677949e-06, 4868, 4138), (8.202770029762375e-06, 4937, 4900), (7.734247024466165e-06, 5380, 4951), (7.292689494733971e-06, 5863, 5394), (6.8244114298063645e-06, 6381, 5902), (6.351125657828656e-06, 6498, 6443), (6.0989944751524625e-06, 7079, 6515), (5.787054982892554e-06, 7171, 7100), (5.565401911918255e-06, 7760, 7181), (5.311841437721075e-06, 8458, 7779), (4.830460900140091e-06, 8684, 8588), (4.55494672415276e-06, 9458, 8704), (4.314382975380008e-06, 10303, 9475), (4.03620674531168e-06, 10483, 10355), (3.849320212067322e-06, 11422, 10515), (3.6164217676580727e-06, 12357, 11443), (3.349048483233164e-06, 12699, 12523), (3.155301436326379e-06, 13763, 12748), (3.03344041476915e-06, 14994, 13770), (2.779930081041578e-06, 15303, 14055), (2.6705510507756797e-06, 16676, 15308), (2.519707449493606e-06, 18149, 16654), (2.3018347989230977e-06, 18556, 18234), (2.2012481753495757e-06, 20221, 18270), (2.0862067027918017e-06, 22038, 18632), (1.9371472342680127e-06, 23891, 20691), (1.8281209777622563e-06, 24358, 22358), (1.7277903267551022e-06, 26548, 22405), (1.6337142364628714e-06, 28935, 24866), (1.4484598345223449e-06, 30130, 29214), (1.3256490774859556e-06, 32746, 30288), (1.275577722747875e-06, 35560, 32602), (1.2114446743430837e-06, 38754, 32661), (1.0995501386855806e-06, 39979, 39003), (1.0496676858324965e-06, 43091, 39432), (1.0005463007244006e-06, 46941, 42937), (9.468638612137905e-07, 51102, 43036), (8.753046965945577e-07, 55684, 46936), (7.816546380343067e-07, 58237, 56632), (7.22806195020422e-07, 63349, 58349), (6.841176429558595e-07, 69045, 63048), (6.450661276220682e-07, 75122, 68696), (6.033270936161084e-07, 81379, 70657), (5.65018092300706e-07, 88605, 76349), (5.353630884493909e-07, 96533, 76585), (4.821738157744172e-07, 100651, 97400), (4.521383384275466e-07, 109506, 100094), (4.2992028416016297e-07, 118162, 107868), (4.089404892923015e-07, 128760, 110308), (3.7217034222588193e-07, 133473, 128529), (3.542995672966949e-07, 143542, 130769), (3.309992648069779e-07, 156300, 134215), (3.086881614555817e-07, 161139, 155513), (2.9067247735257586e-07, 174419, 159060), (2.7435655494723787e-07, 190080, 163155), (2.5489791668074725e-07, 195692, 188290), (2.392068532932338e-07, 213287, 188921), (2.2582558709285065e-07, 232399, 198059), (2.114108888797961e-07, 253309, 198743), (1.9093113911067378e-07, 262526, 252107), (1.809270196358093e-07, 281929, 256228), (1.6995366649707466e-07, 306921, 278941), (1.574939599263172e-07, 320660, 304364), (1.4940102482900272e-07, 344419, 309569), (1.3821992595817828e-07, 375365, 311202), (1.2987194233924002e-07, 389766, 369474), (1.2276200329061069e-07, 419746, 380067), (1.1680767897460501e-07, 456998, 381524), (1.070958927498957e-07, 473654, 448138), (9.945447070245135e-08, 513675, 464311), (9.277878573579208e-08, 559773, 504087), (8.627759966111795e-08, 608330, 549097), (8.19349682793606e-08, 663076, 550158), (7.172032636644599e-08, 705260, 663773), (6.786723010060051e-08, 763966, 684388), (6.277824215865358e-08, 832615, 687489), (5.8782761578933206e-08, 907318, 749509), (5.3697268416237463e-08, 987652, 846939), (4.7732784777668445e-08, 1047822, 986010), (4.515018477510104e-08, 1128944, 1014921), (4.203536297469298e-08, 1229944, 1045910), (3.855531286451254e-08, 1339361, 1210098), (3.630514449464597e-08, 1452590, 1241942), (3.149879198526344e-08, 1569997, 1468493), (2.9541794351864545e-08, 1697626, 1510519), (2.7671188671841692e-08, 1850411, 1517415), (2.4844755846783327e-08, 2013714, 1800831), (2.330457922383942e-08, 2192782, 1812360), (2.1933564717251065e-08, 2385182, 1884119), (1.9383871990931347e-08, 2533691, 2350704), (1.7854761154325578e-08, 2758608, 2435401), (1.6466896285180536e-08, 2984343, 2653984), (1.5344822460942197e-08, 3234105, 2884445), (1.4322513563145753e-08, 3518493, 3141205), (1.3565935200130636e-08, 3833275, 3149978), (1.2722906421771596e-08, 4176881, 3428420), (1.1293514559351862e-08, 4549259, 3575357), (1.0751225628851375e-08, 4951137, 3903222), (1.0044177603930538e-08, 5395093, 4221929), (9.36714684154575e-09, 5869426, 4619491), (7.75354879637254e-09, 6277308, 5771120), (7.268951996599255e-09, 6774415, 6264285), (6.784355196825973e-09, 7285451, 6731304), (6.2997583970526886e-09, 7910507, 7313038), (5.818750690286715e-09, 8601953, 7620850), (5.452491384809311e-09, 9315562, 8223485), (5.069673567906525e-09, 10019735, 8896895), (4.677490881688212e-09, 10906618, 9707098), (4.315110114622641e-09, 11882917, 10031566), (3.87677439818627e-09, 12663660, 11665295), (3.87677439818627e-09, 13160438, 12162073), (3.5848260794040075e-09, 14270774, 12600791), (3.3921775984129864e-09, 15248070, 14134569), (3.1537341087095858e-09, 16616728, 14641062), (2.9075807986397026e-09, 18010736, 16564237), (2.6925041277564678e-09, 19583828, 17225689), (2.4229839988664183e-09, 20671097, 18984457), (2.4229839988664183e-09, 22412372, 20725732), (2.2377871496925985e-09, 24311805, 21523226), (1.938387199093135e-09, 26313552, 24176062), (1.938387199093135e-09, 28568553, 26431063), (1.938387199093135e-09, 29850451, 27712961), (1.7891088237040378e-09, 32504976, 28723061), (1.6644720793759411e-09, 35417461, 28857381), (1.4537903993198513e-09, 37502171, 34595325), (1.4537903993198513e-09, 39162266, 36255420), (1.4537903993198513e-09, 40971770, 38064924), (1.4537903993198513e-09, 42944129, 40037283), (1.370083027211108e-09, 46775564, 40268811), (1.2755637134412193e-09, 50969755, 41503408), (9.691935995465675e-10, 54837177, 50546750), (9.691935995465675e-10, 59734799, 55444372), (9.691935995465675e-10, 62518945, 58228518), (9.691935995465675e-10, 65553664, 61263237), (9.691935995465675e-10, 68861507, 64571080), (9.691935995465675e-10, 72467056, 68176629), (9.691935995465675e-10, 76397105, 72106678), (9.008277299411167e-10, 83227731, 74209899), (8.309978375252648e-10, 90703027, 74507053), (7.404087074730295e-10, 91277227, 79642364), (6.525246316304198e-10, 99490171, 79903693), (5.636178471756032e-10, 108440282, 86868177), (4.845967997732837e-10, 114110437, 105189516), (4.845967997732837e-10, 119199964, 110279043), (4.845967997732837e-10, 124747549, 115826628), (4.845967997732837e-10, 130794416, 121873495), (4.845967997732837e-10, 137385501, 128464580), (4.845967997732837e-10, 144569784, 135648863), (4.845967997732837e-10, 152400652, 143479731), (4.845967997732837e-10, 160936298, 152015377), (4.845967997732837e-10, 170240153, 161319232), (4.845967997732837e-10, 180381355, 171460434), (4.845967997732837e-10, 191435265, 182514344), (4.845967997732837e-10, 203484027, 194563106), (4.845967997732837e-10, 216617177, 207696256), (4.845967997732837e-10, 230932311, 222011390), (4.4819422921049416e-10, 251423106, 226156944), (4.0054325080491115e-10, 274041910, 226873939), (2.612837332943255e-10, 298451293, 249321564), (2.3528155331983047e-10, 325255697, 270671109), (2.0587135915485167e-10, 354355243, 279832675), (1.8157918146552222e-10, 356708378, 305526887), (1.6579386059899665e-10, 388757881, 306713109), (1.4635871728368762e-10, 423742179, 333249134), (1.2105278764368145e-10, 428077163, 364964078), (1.1443109495918326e-10, 466602670, 367943549), (1.0293567957742584e-10, 508532011, 402027006), (8.94818278713833e-11, 554293995, 436279423), (7.60471131504302e-11, 560572284, 503554156), (7.352548541244701e-11, 610133473, 508061394), (6.092297226559804e-11, 665041503, 534381107), (6.052639382184072e-11, 711950768, 626403657), (6.052639382184072e-11, 767631647, 682084536), (5.882038832995762e-11, 835718278, 688556097), (5.418577384003857e-11, 843340422, 733732089), (4.7056536928561213e-11, 919229296, 739150888), (4.411529124746821e-11, 1001894329, 809973839), (4.058437745043241e-11, 1017117066, 878136984), (3.475335844975751e-11, 1107424402, 952110103), (3.245588343549595e-11, 1207045905, 960797586), (2.941019416497881e-11, 1313810503, 1052153381), (2.833591731987854e-11, 1340837006, 1140493318), (2.6281677436238312e-11, 1460959689, 1149843856), (2.2561422857909388e-11, 1592341322, 1252455429), (2.003411751993262e-11, 1735650776, 1358578316), (1.8206890701303284e-11, 1889404690, 1481083396), (1.62979719712907e-11, 2055099708, 1741315971), (1.5435940693789634e-11, 2222204870, 1881675882), (1.4705097082489404e-11, 2418146649, 1911118353), (1.3880907951588567e-11, 2555388615, 2180242061), (1.3140838718119156e-11, 2784402640, 2201040561), (1.1807073194541921e-11, 3034880465, 2387002372), (1.067224303041785e-11, 3277633194, 2773413349), (9.72309960567662e-12, 3548977378, 3003804438), (9.081770678700699e-12, 3853102142, 3309405719), (8.332133473821045e-12, 4163343174, 3541946450), (7.406120515952598e-12, 4517085385, 3583817832), (7.116821670871291e-12, 4903791392, 3845277105), (6.570419359059578e-12, 5343631489, 4196249003), (6.213923126483221e-12, 5482539603, 4673472274), (5.643100282194279e-12, 5939650953, 5021206563), (5.276571458213028e-12, 6446105472, 5405625982), (4.86154980283831e-12, 6966958038, 5845632739), (4.525414279354779e-12, 7524284618, 6331447627), (4.166066736910522e-12, 8189139843, 6889364808), (3.784487589733674e-12, 8866882535, 7458004646), (3.5876007493089486e-12, 9620419496, 8133731671), (3.398531905952314e-12, 10405793425, 8866230787), (3.0117136717250078e-12, 11342085589, 8935695959), (2.776137788843782e-12, 12286663004, 10364880687), (2.5888573988847756e-12, 13355998101, 11130918908), (2.3076507773953824e-12, 14524676636, 11262908924), (2.10000899826842e-12, 15799037769, 12224631953), (1.9251863496699134e-12, 17220822389, 13297993436), (1.836674318979322e-12, 18755583562, 14591165337), (1.6442681115111865e-12, 20403817887, 15812194729), (1.5265607906370196e-12, 22218071297, 17030483827), (1.3786664964700995e-12, 24216660984, 18581377923), (1.2216403154826952e-12, 26395299156, 20252300755), (1.0545911780377638e-12, 28727149752, 22151098813), (9.64071078729514e-13, 31311034287, 23910001390), (8.870082083094829e-13, 34089987238, 28060810648), (8.20648815442324e-13, 37147107443, 28396208918), (7.496708618836621e-13, 40379202923, 30906723634), (6.867608769005049e-13, 44012630223, 33426272873), (6.496105649125237e-13, 47973638796, 36440510031), (5.808685023308795e-13, 52290696451, 39701649153), (5.133791630000786e-13, 53004746713, 43526224698), (4.684038494846028e-13, 57768944398, 44060235403), (4.2364299896538685e-13, 62878645220, 47796067376), (3.841933331015484e-13, 68432097083, 52209855649), (3.495955710277482e-13, 74584815001, 57028729835), (3.2384937317711827e-13, 81290015461, 61744417129), (2.950476018642328e-13, 88532063148, 67827781508), (2.6720472014099514e-13, 90104327231, 73573364732), (2.4128898935235657e-13, 98210822123, 74282729588), (2.2097651202747887e-13, 106917105195, 80929694524), (2.0573817344803378e-13, 116535399456, 88132893447), (1.7982882736176963e-13, 118180387842, 96016880782), (1.6853085376372414e-13, 128813827873, 97159611121), (1.550395749635688e-13, 140405222129, 105836942678), (1.441852111193908e-13, 142214790586, 115050588703), (1.3131816093454917e-13, 155003565445, 116475649761), (1.1773653881414983e-13, 168777721220, 136825350604), (1.0886579799223079e-13, 183617144298, 138993422226), (9.888518721486463e-14, 199964793433, 153783464470), (9.066052218696505e-14, 217956248924, 165981061528), (7.871671848550003e-14, 237557542245, 179885347989), (7.01162728469598e-14, 258441319858, 211391547057), (6.39975265064142e-14, 281499452961, 228129089429), (5.766698937566632e-14, 306625861379, 232365308482), (5.254083772778642e-14, 333912039067, 252659485612), (4.8642585809201024e-14, 363870311437, 274433354648), (4.395835927331244e-14, 396606364492, 298591491668), (4.013522061048672e-14, 431653965289, 327037355387), (3.6560203355977174e-14, 470490308483, 354480447719), (3.3302053038878256e-14, 512824239842, 386391161463), (2.9968770213891283e-14, 558976283129, 419266465614), (2.7121840331176116e-14, 608579272174, 458661799364), (2.5336676673451578e-14, 663350862379, 498034915091), (2.2361701311171266e-14, 723009373504, 543021090606), (2.0607579430916873e-14, 788037962934, 589832703396), (1.8670921910627833e-14, 858929586421, 645485275689), (1.6432734614822708e-14, 931655702994, 759348564445), (1.5029940196484184e-14, 1003155711518, 817298521313), (1.3623457208400235e-14, 1093372933192, 828874304021), (1.2336496182673485e-14, 1190952288853, 960071240269), (1.1227902212436962e-14, 1296113489947, 1044960726765), (1.0298943651385057e-14, 1403539616560, 1131355192274), (9.373883968495486e-15, 1529806823743, 1146521894105), (8.463078958030251e-15, 1666795586521, 1339897416244), (7.598037584868156e-15, 1816776859677, 1358008397224), (6.867887907797613e-15, 1980036619612, 1475621585097), (6.237379969675893e-15, 2158057443348, 1607547092682), (5.456908435677288e-15, 2344321739512, 1751754947144), (4.993712189622105e-15, 2555054850579, 1903344609673), (4.5066408929454954e-15, 2781216528187, 2070507063738), (4.071019178095114e-15, 3031100846443, 2254703107918), (3.71690109089831e-15, 3303582250240, 2452073829192), (3.337930687503047e-15, 3600122384018, 2670347005745), (3.0460716366038847e-15, 3923968541955, 2908794058377), (2.723212878998651e-15, 4277056518884, 3182161609125), (2.438076625671446e-15, 4661588000466, 3476506049426), (2.195462908434929e-15, 5080991137619, 3773246098922), (1.9778272034265366e-15, 5530720959712, 4408918035402), (1.791050832665843e-15, 6016472597807, 4855973095860), (1.630148852554412e-15, 6553497596654, 5214865162226), (1.4829638310999415e-15, 7137362684190, 5701370606802), (1.3571884256006022e-15, 7779104199752, 5782421654803), (1.2351891570925674e-15, 8479192298255, 6310348541630), (1.1168636310174007e-15, 9240350801788, 7383452737161), (1.0156357606341318e-15, 10071919914526, 7491743324502), (9.158363954721736e-16, 10978027922484, 8140962982986), (8.346480762775769e-16, 11965438804662, 8890723162882), (7.525701282177051e-16, 13041226434063, 9650703869692), (6.907508340676858e-16, 14214658751252, 10552210221486), (6.286143332654261e-16, 15493339098268, 11437116235173), (5.711072659354425e-16, 16884556863962, 12524456125365), (5.164067662420903e-16, 18403313268698, 13582132295918), (4.63799839951316e-16, 20059409321914, 14870277999983), (4.209428723877261e-16, 21862825107270, 16105277741997), (3.8428572865418097e-16, 23829952137788, 17569093785092), (3.453680098842355e-16, 25973557704074, 19199819337293), (3.135178460130754e-16, 28310613116558, 20886501554749), (2.8558045700706036e-16, 30858559607410, 22787511091471), (2.5766657775073113e-16, 33635083264826, 24768788720691), (2.3162942308735845e-16, 36657466485962, 27118353615599), (2.0989089979278308e-16, 39956139968804, 29514074264742), (1.900291010911642e-16, 43551803008779, 32217891866153), (1.759600043931158e-16, 47345689409078, 37748592808280), (1.630960876228619e-16, 51321157142584, 40876686044998), (1.5436700124304674e-16, 55642422810667, 44331392526401), (1.4012480767597992e-16, 60580762516844, 48447691648720), (1.2588261410891313e-16, 66001305376138, 52480249035381), (1.1096935437585599e-16, 71583061935276, 57614312897697), (9.982042502074589e-17, 78012813284041, 58599158650985), (9.01503794665699e-17, 85030671915770, 62562378183876), (8.10805225493496e-17, 92682527162380, 68306643558358), (7.25782860810635e-17, 100926608088044, 74165349458428), (6.569775242167916e-17, 110006432761332, 80757304568994), (6.001719584690327e-17, 119773195895909, 88119518639869), (5.4349464103656096e-17, 130485598023247, 95718243697675), (4.908948963814569e-17, 132899017038598, 104636962144410), (4.460100122472867e-17, 144743221998178, 106309840070493), (3.9261884594897457e-17, 157157670133016, 125311493524022), (3.5434988733354467e-17, 171291222888792, 127199967109774), (3.1990728304765156e-17, 186706657583237, 136725545994405), (2.781050158805237e-17, 203425380750360, 161653990237306), (2.5472672119967e-17, 221112298393305, 174517054778342), (2.3182314758495504e-17, 240716883263274, 189199331591212), (2.105555330119537e-17, 262364793719095, 192121295412435), (1.8868616819338355e-17, 285957241449097, 208607899046825), (1.708144813073929e-17, 311677257035210, 228016937437114), (1.514302699914542e-17, 339393106204986, 249430165931394), (1.3652240573456347e-17, 369905954318206, 275141402752828), (1.2404491171316256e-17, 402960798942053, 317839786537339), (1.1197046863632456e-17, 439073990983623, 345177573730801), (1.008812312507782e-17, 478588917024288, 380222255066399), (9.259797076979514e-18, 520624126220237, 408065837927172), (8.330946625816654e-18, 567449542840713, 414439368507424), (7.597995757621901e-18, 616895116079391, 452476815746455), (6.9292411558586395e-18, 671903425676461, 529681791925985), (6.431958385126948e-18, 730261353948095, 574500637375694), (5.810521097451471e-18, 795976592357880, 583102379876707), (5.339508945264565e-18, 865410159894569, 634721654979564), (4.6558538398326594e-18, 943280660452753, 710166008146214), (4.3556774627647415e-18, 1019992474355690, 803490545694953), (3.928452553271718e-18, 1111736990102383, 816315330840115), (3.6754047915011126e-18, 1206705688007088, 952470780852439), (3.271823716241455e-18, 1302409492225165, 1040434272580947), (2.9535507689842747e-18, 1419116910774394, 1115283965642766), (2.7565535936258352e-18, 1534882725834511, 1208266064834349), (2.505161289691886e-18, 1671837654730962, 1318870558963992), (2.2113428978595743e-18, 1821128974279165, 1342755211877324), (2.057341597457109e-18, 1984952573219184, 1475484424533544), (1.8505407399843142e-18, 2163511972156150, 1581157309117066), (1.8377023957505563e-18, 2324720522848385, 1839767247265804), (1.643361864233567e-18, 2533799995761108, 1864894248064363), (1.4894427860223665e-18, 2761764176801129, 2033421017420044), (1.2771103269907468e-18, 3010244307957969, 2216173981487607), (1.0906079054138183e-18, 3247864696513936, 2594392094346456), (9.996123225599274e-19, 3539747161063828, 2631988914985185), (9.188511978752781e-19, 3847468395025341, 3019003108634119), (9.188511978752781e-19, 4131178017526431, 3262521380495185), (8.532496007844301e-19, 4473233433877589, 3603414737095118), (7.729686135974906e-19, 4866867068115820, 3655865716299222), (6.698746389533455e-19, 4973510516640292, 3971667158352021), (5.960616030948729e-19, 5420589191316345, 4039801743997867), (5.453039527069091e-19, 5842763280142009, 4730022107554312), (4.958695147396721e-19, 6368407796608902, 4802370128295839), (4.474628952555163e-19, 6940973181385106, 5134265857926431), (3.94144821726477e-19, 7070603652453457, 5562645205568155), (3.5469150671344934e-19, 7706071399790526, 5652985473379106), (3.1887160967000823e-19, 8399045295651150, 6131634431634694), (2.7735777574466364e-19, 8628972610908226, 6721180285032836), (2.5094297915081505e-19, 9385544355392151, 6856644409551446), (2.232101878837674e-19, 10219561031058132, 7457290127431939), (2.0432624695160694e-19, 10424229840730859, 8081229569718238), (1.8446914791525893e-19, 11362124302192910, 8242302130402157), (1.6818664293579858e-19, 12376870638369998, 8934992706552643), (1.518154752807428e-19, 13460269938242901, 9715722186613401), (1.3621749796773797e-19, 13787294778335531, 10835126914740049), (1.2344755912932648e-19, 15024484969102367, 11045708297204743), (1.1153021295591779e-19, 16367369961311491, 12012037523524358), (9.973307427920462e-20, 17828642934982280, 13001567885722687), (9.123730450163482e-20, 18235642005809560, 14081877689181636), (8.364765971693836e-20, 19834787741886547, 14435781507020619), (7.601915652238794e-20, 21603494843898343, 15669856139170115), (6.843131085851499e-20, 23547232632144037, 16956149067076656), (6.185594583177268e-20, 25664891004176481, 18482010944399514), (5.59563757722321e-20, 27972836577037834, 20036319660651717), (5.166024128217596e-20, 28646049261274418, 21808599474023085), (4.7555981777298293e-20, 31222527436570440, 22339374241301578), (4.1027719616000934e-20, 34031841994302958, 24276870556688590), (3.737480954128858e-20, 37039151866164522, 26428089081385645), (3.331214778360631e-20, 40370960362258102, 28663704479115462), (3.036007565691914e-20, 44002766318432092, 31210521938939010), (2.7882553238979446e-20, 47820244734294658, 33997680377207149), (2.5891871801465628e-20, 52007282519582523, 37028852566449361), (2.358728471072429e-20, 53541701802054152, 40183917584246220), (2.099049180931236e-20, 58094972693133888, 43550052749397746), (1.902155534846823e-20, 63074084262004842, 47202938116369248), (1.7220080427391984e-20, 68217191832439489, 51020444962661387), (1.573810627061421e-20, 74355189325819510, 52344453743327314), (1.4042855237334342e-20, 80909171954225606, 57343060958360520), (1.2549043014170014e-20, 88011502029015772, 62039944287699053), (1.183969261142856e-20, 95926637207705613, 67323848771706590), (1.0261575855881448e-20, 104551239596658485, 73416939668030164), (9.143326246658258e-21, 113831173137018534, 84782093669730129), (8.28980917362228e-21, 123908329014207974, 92259640908132776), (7.498334806376086e-21, 133948514850654407, 99664265026417927), (6.82426359814241e-21, 146002195384354283, 102146028577744863), (6.161321206522205e-21, 159130652205440236, 111081974989874650), (5.483622657149301e-21, 172622677923042337, 128029454305292751), (4.929056965217764e-21, 188145804989513909, 130958553927028791), (4.443545151010323e-21, 204555908416567926, 142708973046664692), (4.025171270277306e-21, 222959113302263047, 155475549764931507), (3.6263701121501346e-21, 243019350861167143, 169619483156843664), (3.227787407342174e-21, 263646864946185659, 195618306848306550), (2.9169526844267962e-21, 287351135491792102, 200165442901996857), (2.6104958241740394e-21, 313212552615844542, 217798392109109550), (2.3664929869994027e-21, 341380677353869365, 237259054104112792), (2.1076559952211294e-21, 372098106743911052, 258325547153327370), (1.90265699453416e-21, 405553901515882182, 281867615725683812), (1.714605916101927e-21, 442009450494606625, 307107244404306678), (1.5420254762779121e-21, 481734556102949502, 334473485445094695), (1.3862133538652324e-21, 523644792732767022, 365027888799778113), (1.2434285355886006e-21, 570705855594581688, 395960907870528906), (1.116106081489088e-21, 621947366763810382, 431945983824638332), (1.0073307395589847e-21, 677899822573024370, 470467009336795725), (9.04572785663313e-22, 738845931034131617, 513684995338418143), (8.089493773283378e-22, 805291300023560198, 559829088754550084), (7.387080057911842e-22, 877657613563347652, 609996392496528409), (6.589384010736669e-22, 956511459967201920, 664294146811562426), (5.983995967838024e-22, 980620080215516990, 723865745961411009), (5.3772428437162405e-22, 1068782851908979221, 741504979249376521), (4.854950087488524e-22, 1164676383096807676, 808036077304183653), (4.372986304369015e-22, 1269445435417587546, 881446096756147230), (3.928931221179898e-22, 1383646725102137665, 960356746817769877), (3.523199250035986e-22, 1508107446663901186, 1046884032070493600), (3.1932636472541213e-22, 1643828719666965895, 1140976172226703008), (2.846001744225528e-22, 1790387016388130113, 1244381694687651606), (2.5672286765132848e-22, 1951213415060489705, 1352800174347468893), (2.312173098245187e-22, 2126540057285390612, 1474287800164277032), (2.0550932286373836e-22, 2317714589243493414, 1605996784186346633), (1.8790725831761382e-22, 2526117927888897192, 1750675990183574530), (1.6812754691575973e-22, 2752933891155269741, 1908610099463099757), (1.495122285681364e-22, 3000409366788817136, 2078234545540061552), (1.3355773456319062e-22, 3269010213834914379, 2271722172333200751), (1.2132510200705895e-22, 3553667448937890547, 2468756375215407056), (1.086907375594567e-22, 3871427800483809631, 2692010082625995629), (9.80286125026791e-23, 3980098116132360293, 2924455577530067913), (8.804987910520532e-23, 4323229748909871827, 3003534218843077992), (7.915777802649205e-23, 4710968689185604767, 3259607571804649799), (7.074140229522829e-23, 5134556839225819500, 3768425927824318111), (6.342189981780531e-23, 5595919780794656616, 3868434500877615440), (5.721024022549403e-23, 6094728251879462482, 4472253127848869259), (5.1091012768775985e-23, 6631840738493046382, 4864194476550636613), (4.567048306120292e-23, 7224672549209057089, 5300082161606658431), (4.115259950235875e-23, 7867343440979772300, 5766573527330191323), (3.713205019040875e-23, 8565472071175275082, 6281147020222130971), (3.3022580410199086e-23, 9333454976514969190, 6843519897330338436), (2.967627846393728e-23, 10172948529525436309, 7017765185093938853), (2.6482790157380844e-23, 11079605957431383524, 8119973321219109041), (2.3690918125918824e-23, 12075887080624320359, 8330923560953639143), (2.1160477969967236e-23, 13160328783780654182, 9079581526417033130), (1.9046557509433197e-23, 14301339550562907181, 10485217565650992850), (1.7069254693381404e-23, 15586799528807892733, 10752364755112796865), (1.5149566290006796e-23, 16986023371587081431, 12448736431262852003), (1.3524984708328816e-23, 18514090971845063870, 12771566841859660355), (1.2030923701596195e-23, 20178554000423879126, 13918201121330952295), (1.0738821403729735e-23, 21994314832471623506, 15166946231970882205), (9.614267140842766e-24, 23964535047894659943, 17544253151461159933), (8.695594628648454e-24, 26071740861751587147, 19090285444220393206), (7.70304827188494e-24, 28418008530932583524, 19591592146614767072), (6.895472125856901e-24, 30966714168262580965, 22678203004386391747), (6.153550130440582e-24, 33750106399497320047, 23259623301364522574), (5.539727876633746e-24, 36783262644085297896, 25364030750256712239), (4.9262598513139484e-24, 40090009852000526213, 27635478848525400845), (4.421731571132341e-24, 43695876188929744363, 30130237388384236900), (3.962421337289756e-24, 47628321782849961126, 32864652509162740782), (3.547533441291502e-24, 51910872492575851071, 35818993033166031381), (3.1539355959664984e-24, 56576157396235127816, 39045009782622394360), (2.8552775941751134e-24, 61534145253738925574, 45141595367295792947), (2.5422459430571504e-24, 67064107851895842013, 46311913922375118491), (2.2795162882353828e-24, 73098038434548639557, 50473678686747611971), (2.046677251708867e-24, 79667735105768400451, 55005272516902870493), (1.8293446682394938e-24, 86823596050471338238, 59973497159010275147), (1.6476633882040637e-24, 94637254886358987470, 65332303059520160742), (1.4772440986200197e-24, 103127200652678296331, 71195603052746826915), (1.3110523013076714e-24, 112406693973463367476, 77630733941830865161), (1.1783204400698379e-24, 122514596445065025845, 84643087150893235584), (1.0484343583174235e-24, 133430165798695938071, 97971936140449219817), (9.43620940093271e-25, 145436262980637148324, 100514661745353345216), (8.418976966356998e-25, 158500012615949512634, 109475775412496236608), (7.5478730904268e-25, 172753547428446937136, 119378803241396438238), (6.748788550841337e-25, 188280512769274789593, 130118247991600433076), (6.029695286515752e-25, 205202384868595907348, 141790320955834944199), (5.382804600677094e-25, 223660573777853558250, 154690650419711280737), (4.817321680555392e-25, 243773034465826590678, 168662771370557304992), (4.3322620535797535e-25, 265707490739476515693, 183828871492157032225), (3.8621035186684e-25, 289608353282244192460, 200420143381587966713), (3.460671792337314e-25, 315656226047317105749, 218631459495087949000), (3.0961258517940033e-25, 344029968488880164574, 238455796995938130747), (2.7785313099749564e-25, 374965420497149048993, 260070519079316810687), (2.4814677576456123e-25, 408672884083559645494, 283807866331577080304), (2.214563418044629e-25, 445452215635045732820, 309531686894959677556), (1.9793466928446241e-25, 485534420786184181176, 337498331461871985509), (1.7698547008187457e-25, 529225852914621839221, 368294400412715976005), (1.581214323328817e-25, 576839210391262652273, 401431052687791171283), (1.408758388808165e-25, 628731862711811011303, 438273881213666751589), (1.2557281314723923e-25, 685240528122338044633, 477897307608845494896), (1.1166756479120487e-25, 705700549930841749940, 521487947225622186990), (1.0029401652543401e-25, 767737373880839914360, 567696094699104539063), (8.939982554510321e-26, 836748611235364093071, 583554640668201918334), (7.994931566626853e-26, 911986275512182742332, 636737807951698407774), (7.137202192485142e-26, 993866894244430964053, 694679098255639759463), (6.367804942610299e-26, 1083082145279740438833, 757331004890928311314), (5.683605942581656e-26, 1180207536451785209026, 826312671982552610502), (5.068607398701404e-26, 1286366326758172897061, 903013788809641019087), (4.3426275196579674e-26, 1342704843562061878633, 999006813227509253257), (3.877353625802749e-26, 1463364985268300991204, 1028630385465675904286), (3.4606717923373144e-26, 1594905064144605613213, 1123312482944828059705), (3.0755607070570385e-26, 1738290026559190377602, 1223908057839017587338), (2.7501697368268835e-26, 1893809858739541496819, 1337191395157090154043), (2.4428271475322223e-26, 2063952128055385773416, 1452576120867792594991), (2.1869579658213019e-26, 2249086407710084612687, 1586399396687222736519), (1.968262169239171e-26, 2449167873599009158518, 1729694377207370929002), (1.7565758533167254e-26, 2664747626025010895521, 1884341158097268690818), (1.5815656453644552e-26, 2904359972293019386256, 2048497181011911670140), (1.4133004190362436e-26, 3165637035343896299028, 2230883120936980343379), (1.2407507199022764e-26, 3274003443591168143943, 2437732057153561050991), (1.1110455144865127e-26, 3568175184570555429109, 2516587122294195435985), (9.869405403994993e-27, 3889307689033569758414, 2737777488851033637607), (8.800981836834091e-27, 4238488144041698298164, 2987952646536908776553), (7.820314014478595e-27, 4619021053414976167986, 3260321191329314678778), (6.95301620851538e-27, 5033455457566114284352, 3556536653833569585604), (6.203753599511382e-27, 5483146592855365783044, 4091229587225542710588), (5.5466153743734406e-27, 5975910876246524590619, 4221997123995469606022), (4.94294019203003e-27, 6512166148831815327827, 4616546018610178444766), (4.135835733007588e-27, 6847032236164203705938, 5115557492718188222499), (4.135835733007588e-27, 7204779861689089894166, 5386566876085736122103), (3.661479996163851e-27, 7851804482437814437260, 5565135090121740346134), (3.2717548176703426e-27, 8557684153824959056998, 6078162970717616591943), (2.9373041675599927e-27, 9326285711196920119013, 6638178140841048794832), (2.232260675760696e-27, 10164429460586852596859, 7198674551389209889617), (2.067917866503794e-27, 10883675835678103854167, 8156485248436900858893), (2.067917866503794e-27, 11431045777959535324689, 8575045803376547924445), (1.8458520620072533e-27, 12459646366810019117905, 8876791846956836053440), (1.4179749613802278e-27, 13580581433549479417576, 9624354802573608668724), (1.1212386716619923e-27, 14798620397540535110410, 10444166474683914565746), (1.033958933251897e-27, 15914427336228362474016, 11958794632004360381009), (1.033958933251897e-27, 16617970372572586527917, 12528670057735469522338), (9.563201529755077e-28, 18110694699635673472318, 13500533379109020934448), (7.5724953216846865e-28, 19737921638814218480263, 14584087885620655459571), (6.071315538164022e-28, 21509252526799556784921, 15758587502814363061771), (4.941990207088028e-28, 23436844779711120774371, 17050386045456145181836), (4.100546185914941e-28, 25542708522749062877596, 18511955890409080812920), (3.4198058576302676e-28, 27838859155445253592236, 19965212712934721945417), (2.9387200021875748e-28, 30337448887320565128706, 21649822797342081427852), (2.4878194322175787e-28, 33055443322411431502337, 23448568506112888629488), (2.086873844904749e-28, 36029873322266333856248, 25411163261683563493338), (1.8135329884319224e-28, 39264425316667979505381, 27574802093082326009168), (1.5609343260113414e-28, 42787076274328302061362, 29925179033327320218315), (1.327696103012952e-28, 46635382158992808508082, 32476944183206911699984), (1.1587799210144054e-28, 50817306526652476034635, 37026850182539291700407), (1.0072088256284553e-28, 55389642519928288312038, 40063757996541509899965), (8.777232494468332e-29, 60356738483729868369199, 43412868728199994807097), (7.507681087865569e-29, 65770169968903133090779, 46945133974103557273012), (6.483800219783385e-29, 71675435847413000816540, 50850846969330355493633), (5.772679122793684e-29, 78120227127640397784368, 55214390912972652696160), (5.0263102829738026e-29, 85126560520749662024960, 59859637561741709860269), (4.347394296872356e-29, 92781167049658688955249, 64921422307862849498612), (3.7782735140977125e-29, 101121961156071680415664, 70398347533549462520041), (3.2453285542069054e-29, 110211543914052315967681, 76374484902667807565334), (2.906404324585783e-29, 120106517179171395128524, 83706083422368863923588), (2.572386389080236e-29, 130904768133113457810562, 90996435071087775785051), (2.2469872969756237e-29, 142631633176609152055918, 98637823781324870937699), (1.9499729886964793e-29, 155403644052070059276630, 106994872633020863427303), (1.6918204434860804e-29, 169380115379179482722374, 116215775012691601938398), (1.4674873278503816e-29, 184610942017619727191979, 126246027510113862946487), (1.301577126477314e-29, 201133969676327142000607, 137937156292586358422041), (1.1430876140634534e-29, 219158010882665679117968, 149797915412241816578852), (1.0087463941675548e-29, 238800720473703679930857, 162751964420709221603233), (8.838735837342974e-30, 260274016323970915355087, 176935744856732660960885), (7.663361620479854e-30, 283606767496920511427717, 192245661933001127603043), (6.736198708748484e-30, 308999486137215174001993, 208954995777085664079541), (5.900597371285283e-30, 336582028575300882830784, 227195675458048454776089), (5.212255296538153e-30, 366867515015398367443947, 247253066035377697390476), (4.6038818128639434e-30, 399868039097739989645253, 268995426038585120932572), (4.050497330073525e-30, 435707005093254914844862, 292730438650137810904823), (3.553810429457832e-30, 474892916045146692112729, 320396539919754022410392), (3.1260709545240647e-30, 517513313283077908365076, 348513184987267067878333), (2.7320910644373614e-30, 563977000899428490589835, 379383828261367576105287), (2.3889763294573375e-30, 614522312662701844196042, 412811343536571000956309), (2.1233825648237528e-30, 669446089444196103267329, 449254694104928018127477), (1.877642360168081e-30, 729690747161438202317253, 488873164948910608023641), (1.670612817802334e-30, 794839015706215572480172, 533757744717187675869511), (1.4709879867125311e-30, 866207304686764289204742, 580870629538878957200872), (1.3028529358957631e-30, 943827179313655253907057, 632997704072643178411936), (1.150224827997016e-30, 1028514743182129046558187, 690272819500257385240122), (1.0061817182991723e-30, 1120350833747298710232233, 751232895685317395260847), (8.804837378367185e-31, 1221018860677623762759749, 817869061654461271850764), (7.792298947371727e-31, 1330396744366334395835024, 890662570852138531890962), (6.867368616221121e-31, 1449055969540497028597736, 970448108654449594457260), (6.070901149217442e-31, 1579008881022276940910823, 1057003265968658132953172), (5.344449150164028e-31, 1719645722778569138881355, 1150362250498756020542957), (4.662081812674589e-31, 1873732436455558902269639, 1254985455463113405915165), (4.064860064706215e-31, 2041116346089879866486242, 1365840875145865735039407), (3.5958377495478057e-31, 2224658432337846649388605, 1489146407870092318657331), (3.168735377575715e-31, 2423330037293311332502453, 1623690412497446484919540), (2.783896554881635e-31, 2640827719179049146052963, 1767858058984327931569265), (2.410104668035426e-31, 2878450913360417582468232, 1926755925179484642512296), (2.130014162393392e-31, 3135409691021715579190379, 2101922038491459550140156), (1.8652656687453668e-31, 3414861407332690361655082, 2289506771544148981468592), (1.6256347803999638e-31, 3721315534363350304644459, 2492455924596293962096804), (1.4273397048850054e-31, 4056120043541889620169937, 2718997920163643491195403), (1.2376977761124692e-31, 4419493933294798026355180, 2961601855795718701845182), (1.0811909281153486e-31, 4816229942710111136280450, 3229640101539722368888136), (9.33955717825694e-32, 5244315502173659113627945, 3517935928700312258372008), (8.201877408667569e-32, 5714468505445024282348629, 3834628676198651015755758), (7.190072004001051e-32, 6223480363326458280287951, 4183061833304980224703845), (6.288907760859082e-32, 6782607698517526551669393, 4562966325161698096920268), (5.431037885270197e-32, 7390957887008738480229344, 4974268630464561760405944), (4.744341111025448e-32, 8050782167201563590522881, 5422810680630365341043387), (4.1450348194341477e-32, 8765621748067306125065256, 5917052684199442612057465), (3.574992313318542e-32, 9552763785056427656831265, 6452831509843698274664112), (3.130938707489689e-32, 10408628253573102474442012, 7030497233055471345666399), (2.7155189426350983e-32, 11341649427523721750711428, 7673677409076007320426987), (2.343393545333591e-32, 12348599696505781476555814, 8357632710888071572134592), (2.0426236797399443e-32, 13458928561316708970123330, 9115555536595039725271491), (1.7702585843927655e-32, 14660766901971463282482297, 9928429063694637410595911), (1.5543880572878053e-32, 15968046195519676743400722, 10820833918780648709734288), (1.3343369894006026e-32, 17400036090778408159073675, 11791968519773475814014552), (1.1676880349303987e-32, 18964445204424925499174040, 12847240306265796146136239), (1.0129507583054877e-32, 20658969378327491410177822, 14033550708583666429169315), (8.787725795000966e-33, 22494569094374170982646874, 15267550510832478827296841), (7.665851905629387e-33, 24511398273467925914494860, 16645246248824756071295798), (6.652213935140517e-33, 26698915403945485117847321, 18177381956876062875262284), (5.740512438520019e-33, 29081378366898496323201149, 19775429731180121378961384), (4.989160451355387e-33, 31687622319043123102124504, 21585599491099184765609431), (4.353489181726774e-33, 34515939237747342816063470, 23499401249943091933208760), (3.7453063994334515e-33, 37613165865563283169266822, 25674593739038779322952718), (3.220734432784975e-33, 40974687110628570184870231, 27968334577978213566866639), (2.803825708199722e-33, 44639671916601543662068879, 30525456393588598528828923), (2.4441846655629926e-33, 48650718894238425768806376, 33307734242329738765773192), (2.097715189774424e-33, 52989748144900323454564716, 36331565727985694830388311), (1.814240164129232e-33, 57663808486709953110890309, 39604124130171383610033314), (1.5771519608623434e-33, 62833274290914425334551816, 43181099425932106716990950), (1.356098708541042e-33, 68450824656548840110558268, 47095370743016758502125855), (1.1653973276524578e-33, 74584436090073784516754514, 51393511265684390725030587), (1.0170740314057813e-33, 81232302537625712619523652, 56055350958494096606234746), (8.761955338124131e-34, 88439381400893140972048580, 61071096969625151287203283), (7.490612798866903e-34, 96259168876657019927591671, 66508173721137615658242528), (6.551422814911114e-34, 104721895767066801325486423, 72475143529467146957622604), (5.658046976514144e-34, 114134887633458257281102928, 78980996372821753972929713), (4.8104852836759935e-34, 124344785955796619624107995, 86231450204476408329613947), (4.157633709462823e-34, 135491435972745228066413882, 94008701770347183462176700), (3.6078639627569947e-34, 147394407152031409793250718, 102603505154096817312927134), (3.0466406796614626e-34, 160623578761079681076422578, 111960733540985032119435503), (2.6114062968526822e-34, 175051809660554756818690472, 122390820129784230544109416), (2.2219860596027207e-34, 190626773123312250049830292, 133586962373797391262215010), (1.9241941134703971e-34, 207401844483494455716814895, 145610373990116614885737809), (1.6493092401174832e-34, 225748449429525421547282624, 159032779822356441062933512), (1.3744243667645695e-34, 245995594676151783043883965, 173906615458883884084905615), (1.1453536389704744e-34, 267950255859324089158633817, 189738119573795114432322243), (9.620970567351987e-35, 291523955071334416764664987, 207037802963319741560050705), (8.246546200587417e-35, 317297410225123744851979799, 225392738744045979720204224), (6.872121833822847e-35, 345744175254448928541074631, 247080107273849730420629035), (5.612232830955325e-35, 376600229774016613022004438, 270386056605318261958477224), (4.5814145558818983e-35, 410021327610565039375871834, 296274686422365649975104054), (3.779667008602566e-35, 446575709378692733216869343, 324769407050242988760168227), (3.092454825220281e-35, 486740653705366866443350425, 356678932995232211247260532), (2.4052426418379967e-35, 529512853156544198517015036, 391568179660826258313740604), (1.9471011862498065e-35, 576378935652029566115708227, 428798433806052661092013693), (1.4889597306616168e-35, 628117289339420516793188437, 470416544553362818726242203), (1.1453536389704746e-35, 683550879808974157935141493, 515276474071911391320548887), (9.162829111763796e-36, 744257244062596933004137110, 564601931165912696943122418), (6.872121833822848e-36, 808839225280413383877674230, 622296093508159370861527926), (4.581414555881898e-36, 879265369566308837733529728, 692660878261967343230578301), (4.008737736396661e-36, 957595765293691093204162661, 756049789235255459773905992), (2.290707277940949e-36, 1042502971002856650682793589, 853074658069236838390873762), (1.1453536389704745e-36, 1135296429485223495932786147, 954343650156179287789694449), (1.1453536389704745e-36, 1236525774417672299532292509, 1052953121335439080699326567), (1.4316920487130931e-37, 1251909234366449510909546312, 1251909234366449510909546312)]
        self.prefix_file_number = 1
        self.base_word_file_number = 2
        self.suffix_file_number = 3
        self.capitalization_file_number = 4
        self.leet_file_number = 5
        self.recommendations_to_return_per_dim = 3
        self.prefix_recommendations = []
        self.suffix_recommendations = []
        self.capital_recommendations = []
        self.l33t_recommendations = []
        self.number_of_recommendations_per_dim = 5
        self.final_number_of_recommendations = 3
        self.number_of_random_chars = 3
        self.size_hp = 4

    def filePath(self, subpath):
        return self.path + self.data_path_augment + subpath

    def unL33tWord(self, marker):
        replace = None
        if marker == 1:
            replace = ("0", "o")
        elif marker == 12:
            replace = ("1", "i")
        elif marker == 13:
            replace = ("!", "i")
        elif marker == 2:
            replace = ("@", "a")
        elif marker == 3:
            replace = ("4", "a")
        elif marker == 6:
            replace = ("3", "e")
        elif marker == 4:
            replace = ("$", "s")
        elif marker == 5:
            replace = ("5", "s")
        elif marker == 11:
            replace = ("2", "z")
        elif marker == 14:
            replace = ("%", "x")
        elif marker == 10:
            replace = ("7", "t")
        elif marker == 9:
            replace = ("+", "t")
        elif marker == 8:
            replace = ("9", "g")
        elif marker == 7:
            replace = ("6", "g")
        return replace

    def get_bits(self, probability):
        probability = float(probability)
        sumz = ESrank.main2(self.L1, self.L2, probability, 14)
        modelRank = sum(sumz) / 2
        if modelRank > 0:
            bits = round(np.log2(modelRank), 3)
        else:
            bits = 150
        return bits

    def enumerate_bits(self, prob_list):
        base = prob_list[0]
        l33t = prob_list[1]
        capital = prob_list[2]
        prefix = prob_list[3]
        suffix = prob_list[4]
        baseline = self.get_bits(base * l33t * capital * prefix * suffix)
        l33t_X = round(baseline - self.get_bits(base * self.empty_l33t * capital * prefix * suffix), 3)
        capital_X = round(baseline - self.get_bits(base * l33t * self.empty_capital * prefix * suffix), 3)
        prefix_X = round(baseline - self.get_bits(base * l33t * capital * self.empty_prefix * suffix), 3)
        suffix_X = round(baseline - self.get_bits(base * l33t * capital * prefix * self.empty_suffix), 3)
        baseline = round(baseline - l33t_X - capital_X - prefix_X - suffix_X, 3)
        return [baseline, l33t_X, capital_X, prefix_X, suffix_X]

    def suggestions_builder(self, pass_part, dim, min_prob):
        randomz = []
        temp_results = []
        results = []
        randomz.append(list(string.digits) + list(string.punctuation))
        randomz = randomz[0]
        if pass_part == '':
            for i in range(0, self.size_hp):
                temp_results.append(''.join(random.sample(randomz, k=1)))
                temp_results.append(''.join(random.sample(randomz, k=2)))
                temp_results.append(''.join(random.sample(randomz, k=3)))
        else:
            for i in range(0, self.size_hp):
                pass_part_temp = list(pass_part)
                pass_part_temp.insert(randrange(len(pass_part_temp) + 1), ''.join(random.sample(randomz, k=1)))
                temp_results.append(''.join(pass_part_temp))

                pass_part_temp = list(pass_part)
                pass_part_temp.insert(randrange(len(pass_part_temp) + 1), ''.join(random.sample(randomz, k=2)))
                temp_results.append(''.join(pass_part_temp))

                pass_part_temp = list(pass_part)
                pass_part_temp.insert(randrange(len(pass_part_temp) + 1), ''.join(random.sample(randomz, k=3)))
                temp_results.append(''.join(pass_part_temp))

        for item in temp_results:
            prob_temp = BS.main(self.filePath('a' + str(dim) + '.txt'), item)
            if prob_temp is None:
                results.append((-5, item))
            else:
                results.append((float(prob_temp), item))
        return results

    def suggestions_wrapper(self, dim, prob, pass_part):
        min_prob = float(str(prob).replace(' ', ''))
        return sorted(self.suggestions_builder(pass_part, dim, min_prob), key=lambda tup: tup[0])#[0:self.recommendations_to_return_per_dim]

    def suggestions_optimized(self):
        new_structure = {
            "prefix": (False, 0),
            "base": (False, 0),
            "suffix": (False, 0),
            "capital": (False, 0),
            "l33t": (False, 0)
        }
        original_word = self.results_struct['finalunL33tBaseWord']
        raw_password = self.results_struct['rawPassword']
        base_prob = self.results_struct['baseProb']
        base_bits = self.results_struct['bits']
        lenz = len(original_word)
        basics = []
        options = []
        candidated = []
        l33tz = []
        for itemsi in self.l33t_recommendations:
            new_structure_copy = new_structure.copy()
            items = str(tuple(itemsi)[1])
            if items == '()':
                l33tz.append((original_word, float(base_prob) * float(itemsi[0]), new_structure_copy, [float(base_prob), itemsi[0]]))
            else:
                items_value = (items.replace(')', '').replace('(', '').replace("'", '').split(','))
                items_value = [items for items in items_value if items != '']
                tempo_l33t = []
                for items1 in items_value:
                    tempo_l33t = []
                    if ' ' in items1:
                        items1 = items1.replace(' ', '')
                    temp_l33t = self.unL33tWord(int(items1))
                    candidate = temp_l33t[1]
                    replacer = temp_l33t[0]
                    for letter in original_word:
                        if letter == candidate:
                            tempo_l33t.append(replacer)
                        else:
                            tempo_l33t.append(letter)
                final_l33t = ''.join(tempo_l33t)
                if itemsi[0] == -5:
                    probs = self.min_l33t
                else:
                    probs = itemsi[0]
                lenz1 = list(str(final_l33t).replace("(", '').replace(")", '').split(","))
                if '' in lenz1:
                    lenz1.remove('')
                new_structure_copy["l33t"] = (True, len(lenz1))
                l33tz.append((final_l33t, float(base_prob) * float(probs), new_structure_copy, [float(base_prob), probs]))
        new_capital = []
        for items11 in self.capital_recommendations:
            items = items11
            tempo_new_capital = []
            items = str(tuple(items)[1])
            items_value = ((items).replace(')', '').replace('(', '').replace("'", '').split(','))
            items_value = [items for items in items_value if items != '']
            for itemz in items_value:
                if '-' in itemz:
                    itemz = itemz.replace('-', '')
                    itemz = int(itemz) * -1
                    itemz = lenz + itemz + 1
                    tempo_new_capital.append(itemz)
                else:
                    itemz = int(itemz)
                    tempo_new_capital.append(itemz)
            new_capital.append((tempo_new_capital, items11[0]))
        for items in new_capital:
            for wordsi in l33tz:
                new_structure_copy = wordsi[2]
                words = wordsi[0]
                tempo_capital = []
                for i, letter in enumerate(words):
                    if i in items[0]:
                        tempo_capital.append(letter.upper())
                    else:
                        tempo_capital.append(letter)
                final_capital = ''.join(tempo_capital)
                if items[1] == -5:
                    probs = self.min_upper
                else:
                    probs = items[1]
                lenz2 = list(str(final_capital).replace("(", '').replace(")", '').split(","))
                if '' in lenz2:
                    lenz2.remove('')
                new_structure_copy["capital"] = (True, len(lenz2))
                listz = wordsi[3].copy()
                listz.append(probs)
                basics.append((final_capital, float(probs) * float(wordsi[1]), new_structure_copy, listz))

        for items in basics:
            new_structure_copy = items[2]
            for item in self.prefix_recommendations:
                if item[0] == -5:
                    probs = self.min_prefix
                else:
                    probs = item[0]
                temp_prefix = str(tuple(item)[1]) + str(items[0])
                new_structure_copy["prefix"] = (True, len(str(tuple(item)[1])))
                listz = items[3].copy()
                listz.append(probs)
                options.append((temp_prefix, items[1] * probs, new_structure_copy, listz))

        for item in options:
            new_structure_copy = item[2]
            for suf in self.suffix_recommendations:
                if suf[0] == -5:
                    probs = self.min_suffix
                else:
                    probs = suf[0]

                temp_suffix = str(item[0]) + str(tuple(suf)[1])
                new_structure_copy["suffix"] = (True, len(str(tuple(suf)[1])))
                listz = item[3].copy()
                listz.append(probs)
                candidated.append((temp_suffix, item[1] * probs, new_structure_copy, listz))

        final_suggestions = []
        for itemz in candidated:
            bits = self.get_bits(itemz[1])
            lev = Levenshtein.distance(itemz[0], raw_password)
            min_lev = 0
            max_lev = len(itemz[0] + raw_password)
            normalized_lev = round(lev * 100 / (max_lev - min_lev), 3)
            algo = round((normalized_lev + bits)/2, 3)
            if (base_bits < bits) and (len(itemz[0]) >= len(raw_password)):
                if raw_password.lower() != itemz[0].lower():
                    bits_list = self.enumerate_bits(itemz[3])
                    final_suggestions.append((itemz[0], bits, lev, algo, bits_list))
        if len(final_suggestions) == 0:
            final_suggestions.append('No suggestions')
        return sorted(final_suggestions, key=lambda tup: tup[3], reverse=True)

    def check_capitalization_alpha(self, pass_part):
        capitalization_vector = []
        alpha_vector = []
        for letter in pass_part:
            capitalization_vector.append(letter.isupper())
            alpha_vector.append(letter.isalpha())
        return capitalization_vector, alpha_vector

    def capitalization_suggestions(self, pass_part, dim, prob):
        prob = float(str(prob).replace(' ', ''))
        pass_part = str(pass_part)
        lenz = len(pass_part)
        capitalization_vector, alpha_vector = self.check_capitalization_alpha(pass_part)
        possible_capital = []
        tempo_capital = capitalization_vector.copy()
        for i in range(0, lenz):
            if not (capitalization_vector[i]) and (alpha_vector[i]):
                tempo_capital[i] = True
                possible_capital.append(tempo_capital)
                tempo_capital = capitalization_vector.copy()
        if (lenz == sum(capitalization_vector)) and (len(possible_capital) == 0):
            for i in range(0, len(capitalization_vector)):
                new_cap_vec = capitalization_vector.copy()
                new_cap_vec[i] = False
                possible_capital.append(new_cap_vec)
        suggestions = []
        for item in possible_capital:
            curr_upper_check = []
            for i in range(0, len(item)):
                if (item[i]) and (i <= lenz // 2):
                    curr_upper_check.append(i)
                elif item[i]:
                    curr_upper_check.append(i - lenz)
            suggestions.append(tuple(curr_upper_check))
        results = []
        for items in suggestions:
            prob_temp = BS.main(self.filePath('a' + str(dim) + '.txt'), str(items))
            if prob_temp == None:
                results.append((-5, items))
            else:
                prob_temp = float(prob_temp)
                if prob_temp < prob:
                    results.append((prob_temp, str(items)))
        return sorted(results, key=lambda tup: tup[0])

    def is_l33t(self, letter):
        l33t = False
        replace = None
        marker = None
        if str(letter) == '0':
            l33t = True
            replace = 'o'
            marker = 1
        elif (str(letter) == '!') or (str(letter) == '1'):
            l33t = True
            replace = 'i'
            marker = 13 if letter == '!' else 12
        elif (str(letter) == '4') or (str(letter) == '@'):
            l33t = True
            replace = 'a'
            marker = 2 if letter == '@' else 3
        elif str(letter) == '3':
            l33t = True
            replace = 'e'
            marker = 6
        elif (str(letter) == '$') or (str(letter) == '5'):
            l33t = True
            replace = 's'
            marker = 4 if letter == '$' else 5
        elif str(letter) == '2':
            l33t = True
            replace = 'z'
            marker = 11
        elif str(letter) == '%':
            l33t = True
            replace = 'x'
            marker = 14
        elif (str(letter) == '7') or (str(letter) == '+'):
            l33t = True
            replace = 't'
            marker = 9 if letter == '+' else 10
        elif (str(letter) == '9') or (str(letter) == '6'):
            l33t = True
            replace = 'g'
            marker = 8 if str(letter) == '9' else 7
        return [l33t, replace, marker]

    def l33t_new(self, letter):
        marker = None
        if str(letter) == 'o':
            marker = [1]
        elif str(letter) == 'i':
            marker = [13, 12]
        elif str(letter) == 'a':
            marker = [2, 3]
        elif str(letter) == 'e':
            marker = [6]
        elif str(letter) == 's':
            marker = [4, 5, '']
        elif str(letter) == 'z':
            marker = [11]
        elif str(letter) == 'x':
            marker = [14]
        elif str(letter) == 't':
            marker = [9, 10]
        elif str(letter) == 'g':
            marker = [8, 7, '']
        return marker

    def check_l33t(self, pass_part):
        l33t_translation = []
        l33t_vector = []
        l33t_markers = []
        l33t_temp = []
        if not pass_part.isalpha():
            for letter in pass_part:
                l33t_temp.append(self.is_l33t(letter))
            for items in l33t_temp:
                l33t_vector.append(items[0])
                l33t_translation.append(items[1])
                l33t_markers.append(items[2])
        else:
            for letter in pass_part:
                l33t_vector.append(False)
                l33t_translation.append(None)
                l33t_markers.append(None)
        return l33t_vector, l33t_translation, l33t_markers

    def l33t_suggestions(self, pass_part, l33t_value, dim, prob):
        l33t_value = ((l33t_value).replace(')', '').replace('(', '').replace("'", '').split(','))
        l33t_value = [items for items in l33t_value if items != '']
        l33t_len = len(l33t_value)
        lenz = len(pass_part)
        l33t_vector, l33t_translation, l33t_markers = self.check_l33t(pass_part)
        new_l33t_markers = [i for i in l33t_markers if i]
        new_l33t_markers = str(tuple(sorted(new_l33t_markers)))
        l33t_list = ['o', 'i', 'a', 'e', 's', 'z', 'x', 't', 'g']
        l33t_candidate = [True if letter in l33t_list else False for letter in pass_part]
        print('\n','\n','\n', l33t_candidate , '\n', '\n', '\n')
        new_l33t = []
        l33t_options = []
        for letter in pass_part:
            new_l33t.append(self.l33t_new(letter))
        new_l33t = [i for i in new_l33t if i]
        new_l33t.sort()
        new_l33t = list(k for k, _ in itertools.groupby(new_l33t))
        new_l33t_options = list(itertools.product(*new_l33t))
        for item in new_l33t_options:
            item = list(item)
            if '' in item:
                item.remove('')
            if item != ['']:
                l33t_options.append(str(tuple(item)).replace(' ', ''))
        new_l33t_flat = [item for sublist in new_l33t for item in sublist]
        if '' in new_l33t_flat:
            new_l33t_flat.remove('')
        for item in new_l33t_flat:
            if item in [12, 13, 11, 14, 10]:
                l33t_options.append("(" + str(item) + ",)")
            else:
                l33t_options.append(str(tuple(str(item))).replace("'", ''))
        results = []
        for items in l33t_options:
            prob_temp = BS.main(self.filePath('a' + str(dim) + '.txt'), str(items))
            if prob_temp == None:
                if l33t_value == items:
                    continue
                else:
                    items_value = ((items).replace(')', '').replace('(', '').replace("'", '').split(','))
                    items_value = [items for items in items_value if items != '']
                    items_len = len(items_value)
                    if abs(items_len - l33t_len) <= 1:
                        results.append((-5, items))
            else:
                prob_temp = float(prob_temp)
                if float(prob_temp) < float(prob):
                    if l33t_value == items:
                        continue
                    else:
                        items_value = ((items).replace(')', '').replace('(', '').replace("'", '').split(','))
                        items_value = [items for items in items_value if items != '']
                        items_len = len(items_value)
                        if abs(items_len - l33t_len) <= 1:
                            results.append((prob_temp, str(items)))
        return sorted(results, key=lambda tup: tup[0])

    def get_recommendations(self):
        self.prefix_recommendations = self.suggestions_wrapper(self.prefix_file_number,
                                                               self.results_struct["prefixProb"],
                                                               self.results_struct["finalPrefix"])
        self.suffix_recommendations = self.suggestions_wrapper(self.suffix_file_number,
                                           self.results_struct["suffixProb"],
                                           self.results_struct["finalSuffix"])
        self.capital_recommendations = self.capitalization_suggestions(self.results_struct["baseWord"],
                                                  self.capitalization_file_number,
                                                  self.results_struct["upperProb"])
        self.l33t_recommendations = self.l33t_suggestions(self.results_struct["finalunL33tBaseWord"],
                                     self.results_struct["l33tList"],
                                     self.leet_file_number,
                                     self.results_struct["l33tProb"])
        ## Adding an empty dimension

        if len(self.prefix_recommendations) > 3:
            self.prefix_recommendations = random.sample(self.prefix_recommendations, k=3)
        else:
            self.prefix_recommendations = random.sample(self.prefix_recommendations, k=len(self.prefix_recommendations))

        if len(self.suffix_recommendations) > 3:
            self.suffix_recommendations = random.sample(self.suffix_recommendations, k=3)
        else:
            self.suffix_recommendations = random.sample(self.suffix_recommendations, k=len(self.suffix_recommendations))

        if len(self.capital_recommendations) > 3:
            self.capital_recommendations = random.sample(self.capital_recommendations, k=3)
        else:
            self.capital_recommendations = random.sample(self.capital_recommendations, k=len(self.capital_recommendations))

        if len(self.l33t_recommendations) > 3:
            self.l33t_recommendations = random.sample(self.l33t_recommendations, k=3)
        else:
            self.l33t_recommendations = random.sample(self.l33t_recommendations, k=len(self.l33t_recommendations))

        self.prefix_recommendations.append(self.empty_prefix_tuple)
        self.suffix_recommendations.append(self.empty_suffix_tuple)
        self.capital_recommendations.append(self.empty_capital_tuple)
        self.l33t_recommendations.append(self.empty_l33t_tuple)
        ## Adding original dimension
        self.prefix_recommendations.append((float(self.results_struct['prefixProb']),self.results_struct['finalPrefix']))
        self.suffix_recommendations.append((float(self.results_struct['suffixProb']), self.results_struct['finalSuffix']))
        self.capital_recommendations.append((float(self.results_struct['upperProb']), self.results_struct['upperList']))
        self.l33t_recommendations.append((float(self.results_struct['l33tProb']), self.results_struct['l33tList']))
        # print('\n', '\n', '\n')
        # print(self.prefix_recommendations)
        # print('\n', '\n', '\n')
        # print(self.suffix_recommendations)
        # print('\n', '\n', '\n')
        # print(self.capital_recommendations)
        # print('\n', '\n', '\n')
        # print(self.l33t_recommendations)
        # print('\n', '\n', '\n')

    def recommender_main(self):
        self.get_recommendations()
        return self.suggestions_optimized()

